# Author : Achintya Gupta
# Purpose : Houses Configurations for Stroke Width Transforms

import numpy as np
from typing import Callable
from typing import ByteString

# Codes
IMAGE_ORIGINAL = b'01'
IMAGE_GRAYSCALE = b'02'
IMAGE_EDGED = b'03'
IMAGE_SWT_TRANSFORMED = b'04'

IMAGE_CONNECTED_COMPONENTS_1C = b'05'
IMAGE_CONNECTED_COMPONENTS_3C = b'06'
IMAGE_CONNECTED_COMPONENTS_3C_WITH_PRUNED_ELEMENTS = b'07'
IMAGE_CONNECTED_COMPONENTS_PRUNED_1C = b'08'
IMAGE_CONNECTED_COMPONENTS_PRUNED_3C = b'09'
IMAGE_CONNECTED_COMPONENTS_OUTLINE = b'10'

IMAGE_PRUNED_3C_LETTER_LOCALIZATIONS = b'11'
IMAGE_ORIGINAL_LETTER_LOCALIZATIONS = b'12'
IMAGE_ORIGINAL_MASKED_LETTER_LOCALIZATIONS = b'13'

IMAGE_PRUNED_3C_WORD_LOCALIZATIONS = b'14'
IMAGE_ORIGINAL_WORD_LOCALIZATIONS = b'15'
IMAGE_ORIGINAL_MASKED_WORD_LOCALIZATIONS = b'16'

IMAGE_INDIVIDUAL_LETTER_LOCALIZATION = b'17'
IMAGE_ORIGINAL_INDIVIDUAL_LETTER_LOCALIZATION = b'18'

IMAGE_INDIVIDUAL_WORD_LOCALIZATION = b'19'
IMAGE_ORIGINAL_INDIVIDUAL_WORD_LOCALIZATION = b'20'

TRANSFORM_INPUT__1C_IMAGE = b'21'
TRANSFORM_INPUT__3C_IMAGE = b'22'

# CONSTANTS
CONFIG__SWTLOCALIZER = 'swtlocalizer'
CONFIG__SWTLOCALIZER__MULTIPROCESSING = f'{CONFIG__SWTLOCALIZER}.multiprocessing'
CONFIG__SWTLOCALIZER__TRANSFORM_IMAGES = f'{CONFIG__SWTLOCALIZER}.images'
CONFIG__SWTLOCALIZER__TRANSFORM_IMAGE_PATHS = f'{CONFIG__SWTLOCALIZER}.image_paths'

CONFIG__SWTIMAGE__TRANSFORM = 'swtimage.transform'
CONFIG__SWTIMAGE__TRANSFORM_TEXT_MODE = f'{CONFIG__SWTIMAGE__TRANSFORM}.text_mode'
CONFIG__SWTIMAGE__TRANSFORM_ENGINE = f'{CONFIG__SWTIMAGE__TRANSFORM}.engine'
CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR = f'{CONFIG__SWTIMAGE__TRANSFORM}.gaussian_blurr'
CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR_KERNEL = f'{CONFIG__SWTIMAGE__TRANSFORM}.gaussian_blurr_kernel'
CONFIG__SWTIMAGE__TRANSFORM_EDGE_FUNCTION = f'{CONFIG__SWTIMAGE__TRANSFORM}.edge_function'
CONFIG__SWTIMAGE__TRANSFORM_AUTO_CANNY_SIGMA = f'{CONFIG__SWTIMAGE__TRANSFORM}.auto_canny_sigma'
CONFIG__SWTIMAGE__TRANSFORM_MINIMUM_STROKE_WIDTH = f'{CONFIG__SWTIMAGE__TRANSFORM}.minimum_stroke_width'
CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_STROKE_WIDTH = f'{CONFIG__SWTIMAGE__TRANSFORM}.maximum_stroke_width'
CONFIG__SWTIMAGE__TRANSFORM_CHECK_ANGLE_DEVIATION = f'{CONFIG__SWTIMAGE__TRANSFORM}.check_angle_deviation'
CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_ANGLE_DEVIATION = f'{CONFIG__SWTIMAGE__TRANSFORM}.maximum_angle_deviation'
CONFIG__SWTIMAGE__TRANSFORM_INCLUDE_EDGES_IN_SWT = f'{CONFIG__SWTIMAGE__TRANSFORM}.include_edges_in_swt'
CONFIG__SWTIMAGE__TRANSFORM_DISPLAY = f'{CONFIG__SWTIMAGE__TRANSFORM}.display'

CONFIG__SWTIMAGE__LOCALIZELETTERS = 'swtimage.localizeletters'
CONFIG__SWTIMAGE__LOCALIZELETTERS_MAXIMUM_PIXELS_PER_CC = f'{CONFIG__SWTIMAGE__LOCALIZELETTERS}.maximum_pixels_per_cc'
CONFIG__SWTIMAGE__LOCALIZELETTERS_MINIMUM_PIXELS_PER_CC = f'{CONFIG__SWTIMAGE__LOCALIZELETTERS}.minimum_pixels_per_cc'
CONFIG__SWTIMAGE__LOCALIZELETTERS_ACCEPTABLE_ASPECT_RATIO = f'{CONFIG__SWTIMAGE__LOCALIZELETTERS}.acceptable_aspect_ratio'
CONFIG__SWTIMAGE__LOCALIZELETTERS_LOCALIZE_BY = f'{CONFIG__SWTIMAGE__LOCALIZELETTERS}.localize_by'
CONFIG__SWTIMAGE__LOCALIZELETTERS_PADDING_PCT = f'{CONFIG__SWTIMAGE__LOCALIZELETTERS}.padding_pct'
CONFIG__SWTIMAGE__LOCALIZELETTERS_DISPLAY = f'{CONFIG__SWTIMAGE__LOCALIZELETTERS}.display'

CONFIG__SWTIMAGE__LOCALIZEWORDS = 'swtimage.localizewords'
CONFIG__SWTIMAGE__LOCALIZEWORDS_LOCALIZE_BY = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.localize_by'
CONFIG__SWTIMAGE__LOCALIZEWORDS_LOOKUP_RADIUS_MULTIPLIER = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.lookup_radius_multiplier'
CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_STROKE_WIDTH_RATIO = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.acceptable_stroke_width_ratio'
CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_COLOR_DEVIATION = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.acceptable_color_deviation'
CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_HEIGHT_RATIO = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.acceptable_height_ratio'
CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_ANGLE_DEVIATION = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.acceptable_angle_deviation'
CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_ITERATIONS = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.polygon_dilate_iterations'
CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_KERNEL = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.polygon_dilate_kernel'
CONFIG__SWTIMAGE__LOCALIZEWORDS_DISPLAY = f'{CONFIG__SWTIMAGE__LOCALIZEWORDS}.display'

CONFIG__SWTIMAGE__GETLETTER = 'swtimage.getletter'
CONFIG__SWTIMAGE__GETLETTER_KEY = f'{CONFIG__SWTIMAGE__GETLETTER}.key'
CONFIG__SWTIMAGE__GETLETTER_LOCALIZE_BY = f'{CONFIG__SWTIMAGE__GETLETTER}.localize_by'
CONFIG__SWTIMAGE__GETLETTER_DISPLAY = f'{CONFIG__SWTIMAGE__GETLETTER}.display'

CONFIG__SWTIMAGE__GETWORD = 'swtimage.getword'
CONFIG__SWTIMAGE__GETWORD_KEY = f'{CONFIG__SWTIMAGE__GETWORD}.key'
CONFIG__SWTIMAGE__GETWORD_LOCALIZE_BY = f'{CONFIG__SWTIMAGE__GETWORD}.localize_by'
CONFIG__SWTIMAGE__GETWORD_DISPLAY = f'{CONFIG__SWTIMAGE__GETWORD}.display'

CONFIG__SWTIMAGE__SHOWIMAGE = 'swtimage.showimage'
CONFIG__SWTIMAGE__SHOWIMAGE_IMAGE_CODES = f'{CONFIG__SWTIMAGE__SHOWIMAGE}.image_codes'
CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_TITLE = f'{CONFIG__SWTIMAGE__SHOWIMAGE}.plot_title'
CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_SUP_TITLE = f'{CONFIG__SWTIMAGE__SHOWIMAGE}.plot_sup_title'
CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_DIR = f'{CONFIG__SWTIMAGE__SHOWIMAGE}.save_dir'
CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_FIG = f'{CONFIG__SWTIMAGE__SHOWIMAGE}.save_fig'
CONFIG__SWTIMAGE__SHOWIMAGE_DPI = f'{CONFIG__SWTIMAGE__SHOWIMAGE}.dpi'

CONFIG__SWTIMAGE__SAVECROPS = 'swtimage.savecrops'
CONFIG__SWTIMAGE__SAVECROPS_SAVE_PATH = f'{CONFIG__SWTIMAGE__SAVECROPS}.save_path'
CONFIG__SWTIMAGE__SAVECROPS_CROP_OF = f'{CONFIG__SWTIMAGE__SAVECROPS}.crop_of'
CONFIG__SWTIMAGE__SAVECROPS_CROP_KEY = f'{CONFIG__SWTIMAGE__SAVECROPS}.crop_key'
CONFIG__SWTIMAGE__SAVECROPS_CROP_ON = f'{CONFIG__SWTIMAGE__SAVECROPS}.crop_on'


# SWTImage Configuration
config = dict()

# For swtlocalizer
config[f'{CONFIG__SWTLOCALIZER__MULTIPROCESSING}.type'] = [bool]
config[f'{CONFIG__SWTLOCALIZER__MULTIPROCESSING}.options'] = [False]
config[f'{CONFIG__SWTLOCALIZER__MULTIPROCESSING}'] = False

# For swtimage.transform
config[f'{CONFIG__SWTLOCALIZER__TRANSFORM_IMAGES}.type'] = [list, np.ndarray, type(None)]
config[f'{CONFIG__SWTLOCALIZER__TRANSFORM_IMAGES}.options'] = None
config[f'{CONFIG__SWTLOCALIZER__TRANSFORM_IMAGES}'] = None

config[f'{CONFIG__SWTLOCALIZER__TRANSFORM_IMAGE_PATHS}.type'] = [list, str, type(None)]
config[f'{CONFIG__SWTLOCALIZER__TRANSFORM_IMAGE_PATHS}.options'] = None
config[f'{CONFIG__SWTLOCALIZER__TRANSFORM_IMAGE_PATHS}'] = None

config[f'{CONFIG__SWTIMAGE__TRANSFORM_TEXT_MODE}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_TEXT_MODE}.options'] = ['db_lf', 'lb_df']
config[f'{CONFIG__SWTIMAGE__TRANSFORM_TEXT_MODE}'] = 'lb_df'

config[f'{CONFIG__SWTIMAGE__TRANSFORM_ENGINE}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_ENGINE}.options'] = ['numba', 'python']
config[f'{CONFIG__SWTIMAGE__TRANSFORM_ENGINE}'] = 'numba'

config[f'{CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR}.options'] = [True, False]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR}'] = True

config[f'{CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR_KERNEL}.type'] = [tuple]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR_KERNEL}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_GAUSSIAN_BLURR_KERNEL}'] = (5, 5)

config[f'{CONFIG__SWTIMAGE__TRANSFORM_EDGE_FUNCTION}.type'] = [str, Callable]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_EDGE_FUNCTION}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_EDGE_FUNCTION}'] = 'ac'

config[f'{CONFIG__SWTIMAGE__TRANSFORM_AUTO_CANNY_SIGMA}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_AUTO_CANNY_SIGMA}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_AUTO_CANNY_SIGMA}'] = 0.33

config[f'{CONFIG__SWTIMAGE__TRANSFORM_MINIMUM_STROKE_WIDTH}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_MINIMUM_STROKE_WIDTH}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_MINIMUM_STROKE_WIDTH}'] = 3

config[f'{CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_STROKE_WIDTH}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_STROKE_WIDTH}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_STROKE_WIDTH}'] = 200

config[f'{CONFIG__SWTIMAGE__TRANSFORM_CHECK_ANGLE_DEVIATION}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_CHECK_ANGLE_DEVIATION}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_CHECK_ANGLE_DEVIATION}'] = True

config[f'{CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_ANGLE_DEVIATION}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_ANGLE_DEVIATION}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_MAXIMUM_ANGLE_DEVIATION}'] = np.pi / 6

config[f'{CONFIG__SWTIMAGE__TRANSFORM_INCLUDE_EDGES_IN_SWT}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_INCLUDE_EDGES_IN_SWT}.options'] = None
config[f'{CONFIG__SWTIMAGE__TRANSFORM_INCLUDE_EDGES_IN_SWT}'] = True

config[f'{CONFIG__SWTIMAGE__TRANSFORM_DISPLAY}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_DISPLAY}.options'] = [True, False]
config[f'{CONFIG__SWTIMAGE__TRANSFORM_DISPLAY}'] = True


# For swtimage.localizeLetters
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_MAXIMUM_PIXELS_PER_CC}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_MAXIMUM_PIXELS_PER_CC}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_MAXIMUM_PIXELS_PER_CC}'] = 10_000

config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_MINIMUM_PIXELS_PER_CC}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_MINIMUM_PIXELS_PER_CC}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_MINIMUM_PIXELS_PER_CC}'] = 50

config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_ACCEPTABLE_ASPECT_RATIO}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_ACCEPTABLE_ASPECT_RATIO}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_ACCEPTABLE_ASPECT_RATIO}'] = 0.2

config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_LOCALIZE_BY}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_LOCALIZE_BY}.options'] = ['min_bbox', 'ext_bbox', 'outline']
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_LOCALIZE_BY}'] = 'min_bbox'

config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_PADDING_PCT}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_PADDING_PCT}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_PADDING_PCT}'] = 0.01

config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_DISPLAY}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_DISPLAY}.options'] = [True, False]
config[f'{CONFIG__SWTIMAGE__LOCALIZELETTERS_DISPLAY}'] = True


# For swtimage.localizeWords
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_LOCALIZE_BY}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_LOCALIZE_BY}.options'] = ['bubble', 'bbox', 'polygon']
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_LOCALIZE_BY}'] = 'bubble'

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_LOOKUP_RADIUS_MULTIPLIER}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_LOOKUP_RADIUS_MULTIPLIER}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_LOOKUP_RADIUS_MULTIPLIER}'] = 1.10

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_STROKE_WIDTH_RATIO}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_STROKE_WIDTH_RATIO}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_STROKE_WIDTH_RATIO}'] = 2.00

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_COLOR_DEVIATION}.type'] = [list]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_COLOR_DEVIATION}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_COLOR_DEVIATION}'] = [13, 13, 13]

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_HEIGHT_RATIO}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_HEIGHT_RATIO}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_HEIGHT_RATIO}'] = 2.00

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_ANGLE_DEVIATION}.type'] = [float]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_ANGLE_DEVIATION}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_ACCEPTABLE_ANGLE_DEVIATION}'] = 30.0

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_ITERATIONS}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_ITERATIONS}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_ITERATIONS}'] = 5

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_KERNEL}.type'] = [tuple]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_KERNEL}.options'] = None
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_POLYGON_DILATE_KERNEL}'] = (5, 5)

config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_DISPLAY}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_DISPLAY}.options'] = [True, False]
config[f'{CONFIG__SWTIMAGE__LOCALIZEWORDS_DISPLAY}'] = True


# For swtimage.getLetter
config[f'{CONFIG__SWTIMAGE__GETLETTER_KEY}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__GETLETTER_KEY}.options'] = None
config[f'{CONFIG__SWTIMAGE__GETLETTER_KEY}'] = 1

config[f'{CONFIG__SWTIMAGE__GETLETTER_LOCALIZE_BY}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__GETLETTER_LOCALIZE_BY}.options'] = ['min_bbox', 'ext_bbox', 'outline']
config[f'{CONFIG__SWTIMAGE__GETLETTER_LOCALIZE_BY}'] = 'min_bbox'

config[f'{CONFIG__SWTIMAGE__GETLETTER_DISPLAY}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__GETLETTER_DISPLAY}.options'] = [True, False]
config[f'{CONFIG__SWTIMAGE__GETLETTER_DISPLAY}'] = True


# For swtimage.getWord
config[f'{CONFIG__SWTIMAGE__GETWORD_KEY}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__GETWORD_KEY}.options'] = None
config[f'{CONFIG__SWTIMAGE__GETWORD_KEY}'] = 1

config[f'{CONFIG__SWTIMAGE__GETWORD_LOCALIZE_BY}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__GETWORD_LOCALIZE_BY}.options'] = ['bubble', 'polygon', 'bbox']
config[f'{CONFIG__SWTIMAGE__GETWORD_LOCALIZE_BY}'] = 'bubble'

config[f'{CONFIG__SWTIMAGE__GETWORD_DISPLAY}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__GETWORD_DISPLAY}.options'] = [True, False]
config[f'{CONFIG__SWTIMAGE__GETWORD_DISPLAY}'] = True


# For swtimage.showImage
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_IMAGE_CODES}.type'] = [list]
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_IMAGE_CODES}.options'] = None
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_IMAGE_CODES}'] = [IMAGE_SWT_TRANSFORMED]

config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_TITLE}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_TITLE}.options'] = None
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_TITLE}'] = ''

config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_SUP_TITLE}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_SUP_TITLE}.options'] = None
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_PLOT_SUP_TITLE}'] = ''

config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_DIR}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_DIR}.options'] = None
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_DIR}'] = ''

config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_FIG}.type'] = [bool]
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_FIG}.options'] = None
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_SAVE_FIG}'] = False

config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_DPI}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_DPI}.options'] = None
config[f'{CONFIG__SWTIMAGE__SHOWIMAGE_DPI}'] = 200


# For swtimage.saveCrops
config[f'{CONFIG__SWTIMAGE__SAVECROPS_SAVE_PATH}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__SAVECROPS_SAVE_PATH}.options'] = None
config[f'{CONFIG__SWTIMAGE__SAVECROPS_SAVE_PATH}'] = ''

config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_OF}.type'] = [str]
config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_OF}.options'] = ['letters', 'words']
config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_OF}'] = 'words'

config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_KEY}.type'] = [int]
config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_KEY}.options'] = None
config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_KEY}'] = 1

config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_ON}.type'] = [ByteString]
config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_ON}.options'] = None
config[f'{CONFIG__SWTIMAGE__SAVECROPS_CROP_ON}'] = IMAGE_SWT_TRANSFORMED


def get_code_descriptions(code: ByteString) -> str:
    """
    Retrieve String description of various Image Codes.

    Args:
        code (ByteString): Image Code
    Returns:
        (str) : A string description of the input image code.
    """
    if code == IMAGE_ORIGINAL:
        return "Original Image"
    elif code == IMAGE_GRAYSCALE:
        return "Gray-Scaled Image"
    elif code == IMAGE_EDGED:
        return "Edge Image"
    elif code == IMAGE_SWT_TRANSFORMED:
        return "SWT Transformed Image"
    elif code == IMAGE_CONNECTED_COMPONENTS_1C:
        return "Unpruned Connected Components\nSingle Channel"
    elif code == IMAGE_CONNECTED_COMPONENTS_3C:
        return "Unpruned Connected Components\nRGB Channel"
    elif code == IMAGE_CONNECTED_COMPONENTS_3C_WITH_PRUNED_ELEMENTS:
        return "Connected Components\nRegions which were pruned (in red)"
    elif code == IMAGE_CONNECTED_COMPONENTS_PRUNED_1C:
        return "Pruned Connected Components\nSingle Channel"
    elif code == IMAGE_CONNECTED_COMPONENTS_PRUNED_3C:
        return "Pruned Connected Components\nRGB Channel"
    elif code == IMAGE_CONNECTED_COMPONENTS_OUTLINE:
        return "Connected Components Outline"
    elif code == TRANSFORM_INPUT__3C_IMAGE:
        return "RGB Channel Image Input"
    elif code == TRANSFORM_INPUT__1C_IMAGE:
        return "Single Channel Image Input"
    elif code == IMAGE_PRUNED_3C_LETTER_LOCALIZATIONS:
        return "Pruned RGB Channel SWT Image\nWith Letter Localizations"
    elif code == IMAGE_ORIGINAL_LETTER_LOCALIZATIONS:
        return "Original Image\nWith Letter Localizations"
    elif code == IMAGE_ORIGINAL_MASKED_LETTER_LOCALIZATIONS:
        return "Original Image\nWith Masked Letter Localizations"
    elif code == IMAGE_PRUNED_3C_WORD_LOCALIZATIONS:
        return "Pruned RGB Channel SWT Image\nWith Words Localizations"
    elif code == IMAGE_ORIGINAL_WORD_LOCALIZATIONS:
        return "Original Image\nWith Words Localizations"
    elif code == IMAGE_ORIGINAL_MASKED_WORD_LOCALIZATIONS:
        return "Original Image\nWith Masked Words Localizations"
    elif code == IMAGE_INDIVIDUAL_LETTER_LOCALIZATION:
        return "Individual Letter\nWith Localizations Over Edged + SWT"
    elif code == IMAGE_ORIGINAL_INDIVIDUAL_LETTER_LOCALIZATION:
        return "Individual Letter\nWith Localizations Over Original"
    elif code == IMAGE_INDIVIDUAL_WORD_LOCALIZATION:
        return "Individual Word\nWith Localizations Over Edged + SWT"
    elif code == IMAGE_ORIGINAL_INDIVIDUAL_WORD_LOCALIZATION:
        return "Individual Word\nWith Localizations Over Original"
    else:
        return ''


CODE_VAR_NAME_MAPPINGS = {IMAGE_ORIGINAL: 'IMAGE_ORIGINAL',
                          IMAGE_GRAYSCALE: 'IMAGE_GRAYSCALE',
                          IMAGE_EDGED: 'IMAGE_EDGED',
                          IMAGE_SWT_TRANSFORMED: 'IMAGE_SWT_TRANSFORMED',

                          IMAGE_CONNECTED_COMPONENTS_1C: 'IMAGE_CONNECTED_COMPONENTS_1C',
                          IMAGE_CONNECTED_COMPONENTS_3C: 'IMAGE_CONNECTED_COMPONENTS_3C',
                          IMAGE_CONNECTED_COMPONENTS_3C_WITH_PRUNED_ELEMENTS: 'IMAGE_CONNECTED_COMPONENTS_3C_WITH_PRUNED_ELEMENTS',
                          IMAGE_CONNECTED_COMPONENTS_PRUNED_1C: 'IMAGE_CONNECTED_COMPONENTS_PRUNED_1C',
                          IMAGE_CONNECTED_COMPONENTS_PRUNED_3C: 'IMAGE_CONNECTED_COMPONENTS_PRUNED_3C',

                          IMAGE_PRUNED_3C_LETTER_LOCALIZATIONS: 'IMAGE_PRUNED_3C_LETTER_LOCALIZATIONS',
                          IMAGE_ORIGINAL_LETTER_LOCALIZATIONS: 'IMAGE_ORIGINAL_LETTER_LOCALIZATIONS',
                          IMAGE_ORIGINAL_MASKED_LETTER_LOCALIZATIONS: 'IMAGE_ORIGINAL_MASKED_LETTER_LOCALIZATIONS',
                          IMAGE_PRUNED_3C_WORD_LOCALIZATIONS: 'IMAGE_PRUNED_3C_WORD_LOCALIZATIONS',
                          IMAGE_ORIGINAL_WORD_LOCALIZATIONS: 'IMAGE_ORIGINAL_WORD_LOCALIZATIONS',
                          IMAGE_ORIGINAL_MASKED_WORD_LOCALIZATIONS: 'IMAGE_ORIGINAL_MASKED_WORD_LOCALIZATIONS',
                          IMAGE_INDIVIDUAL_LETTER_LOCALIZATION: 'IMAGE_INDIVIDUAL_LETTER_LOCALIZATION',
                          IMAGE_ORIGINAL_INDIVIDUAL_LETTER_LOCALIZATION: 'IMAGE_ORIGINAL_INDIVIDUAL_LETTER_LOCALIZATION',
                          IMAGE_INDIVIDUAL_WORD_LOCALIZATION: 'IMAGE_INDIVIDUAL_WORD_LOCALIZATION',
                          IMAGE_ORIGINAL_INDIVIDUAL_WORD_LOCALIZATION: 'IMAGE_ORIGINAL_INDIVIDUAL_WORD_LOCALIZATION'}

CODE_NAME_VAR_MAPPINGS = {v: k for k, v in CODE_VAR_NAME_MAPPINGS.items()}

